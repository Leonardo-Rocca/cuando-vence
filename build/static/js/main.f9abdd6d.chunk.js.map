{"version":3,"sources":["containers/AppNotification.ts","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["options","body","icon","logo","vibrate","tag","image","actions","action","title","showNotification","navigator","serviceWorker","ready","then","a","Notification","requestPermission","App","useEffect","askUserPermission","setTimeout","console","log","className","src","alt","href","target","rel","Button","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"4RAGMA,G,MAAU,CACZC,KAHS,yCAITC,KAAMC,IACNC,QAAS,CAAC,IAAK,IAAK,KACpBC,IAAK,cACLC,MAAOH,IAEPI,QAAS,CAAC,CAAEC,OAAQ,SAAUC,MAAO,WAM5BC,EAAkB,kBAAIC,UAAUC,cAAcC,MAAMC,MAAK,SAASF,GAC3EA,EAAcF,iBAfJ,wBAe4BV,O,oDCX1C,sBAAAe,EAAA,sEACeC,aAAaC,oBAD5B,oF,sBAgCeC,MA5Bf,WAIE,OAHAC,qBAAU,Y,mCAAKC,GAAoBC,YAAW,WAC5CX,IAAmBY,QAAQC,IAAI,YAC/B,OAAO,IAEP,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKtB,IAAMqB,UAAU,WAAWE,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEF,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,kBAACC,EAAA,EAAD,CAAQC,QAASrB,GAAjB,eACA,kBAACoB,EAAA,EAAD,CAAQC,QAAS,kBAAIV,YAAW,WAC9BX,IAAmBY,QAAQC,IAAI,YAC/B,OAFF,kCClBFS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+CN,SAASC,EAAgBC,EAAeC,GACtC7B,UAAUC,cACP6B,SAASF,GACTzB,MAAK,SAAA4B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfpC,UAAUC,cAAcoC,YAI1B1B,QAAQC,IACN,iHAKEiB,GAAUA,EAAOS,UACnBT,EAAOS,SAASP,KAMlBpB,QAAQC,IAAI,sCAGRiB,GAAUA,EAAOU,WACnBV,EAAOU,UAAUR,WAO5BS,OAAM,SAAAC,GACL9B,QAAQ8B,MAAM,4CAA6CA,MCnGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBjB,GACvB,GAA6C,kBAAmB7B,UAAW,CAOzE,GALAW,QAAQC,IAAK,MAAMmC,uBACD,IAAIC,IACpBD,sBACAxB,OAAOC,SAASR,MAEJiC,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,sBAAN,sBAEP1B,IAgEV,SAAiCO,EAAeC,GAE9CsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAAAkD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzD,UAAUC,cAAcC,MAAMC,MAAK,SAAA4B,GACjCA,EAAa2B,aAAavD,MAAK,WAC7BoB,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BW,OAAM,WACL7B,QAAQC,IACN,oEAvFAgD,CAAwBhC,EAAOC,GAI/B7B,UAAUC,cAAcC,MAAMC,MAAK,WACjCQ,QAAQC,IACN,iHAMJe,EAAgBC,EAAOC,OC1C/B5B,GACAU,QAAQC,IAAI,S,kBClBZiD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.f9abdd6d.chunk.js","sourcesContent":["import logo from '../logo.svg';\r\nconst text = \"Take a look at this brand new t-shirt!\";\r\nconst title = \"New Product Available\";\r\nconst options = {\r\n    body: text,\r\n    icon: logo,\r\n    vibrate: [200, 100, 200],\r\n    tag: \"new-product\",\r\n    image: logo,\r\n  //  badge: \"https://spyna.it/icons/android-icon-192x192.png\",\r\n    actions: [{ action: \"Detail\", title: \"View\"\r\n       // , icon: \"https://via.placeholder.com/128/ff0000\"\r\n    }]\r\n};\r\n\r\n\r\nexport const showNotification =()=>navigator.serviceWorker.ready.then(function(serviceWorker) {\r\n    serviceWorker.showNotification(title, options);\r\n});","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {showNotification} from './containers/AppNotification'\nimport {Button} from \"@material-ui/core\";\n\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n\nfunction App() {\n  useEffect(()=>{askUserPermission();setTimeout(()=>{\n    showNotification();console.log(\"sended\")\n  },3000)},[])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <Button onClick={showNotification} > Show Notif</Button>\n        <Button onClick={()=>setTimeout(()=>{\n          showNotification();console.log(\"sended\")\n        },3000)} > Show Notif after 3 seconds</Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    console.log( \"URL\",process.env.PUBLIC_URL)\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\nconsole.log(\"asas\")","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}